#pragma checksum "C:\Users\Labra\OneDrive\Documenten\GitHub\ClearsBot\BotDashboard\Pages\Users\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e86299b580430a3c38b6dd11e054d40a204c82d2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(BotDashboard.Pages.Users.Pages_Users_Index), @"mvc.1.0.razor-page", @"/Pages/Users/Index.cshtml")]
namespace BotDashboard.Pages.Users
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Labra\OneDrive\Documenten\GitHub\ClearsBot\BotDashboard\Pages\_ViewImports.cshtml"
using BotDashboard;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e86299b580430a3c38b6dd11e054d40a204c82d2", @"/Pages/Users/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"935d1764fd0aae92f46c99d44159fcc2fc1b866b", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Users_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<script src=""https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js""></script>
<div id=""app"">
    <div class=""row align-align-items-center"" v-if=""changes"" style=""position: fixed; top: 1.5%; left: 50%;"">
        <div>
            {{ error }}
        </div>
   </div>
   <div class=""container"">
      <div class=""row"">
         <div class=""col-sm-3"">
            <input v-on:input=""TbChange()"" v-model=""usernameSearch""/>
            <div style=""overflow-y: scroll;"">
                <div v-for=""user in filteredUsers"" v-if=""users != null"" v-on:click=""SetActiveUser(user.guid)"">
                    <h6>{{ user.username }}</h6>
                    <div class=""row"">
                        <p class=""col-sm-9""> {{ user.membershipId }}</p>
                        <img class=""col-sm-3"" v-bind:src=""GetPlatformUrl(user.membershipType)""/>
                    </div>
                </div>
            </div>
         </div>
         <div v-if=""activeUser != null"" class=""col-sm-9"">
             <div class=""row"">
");
            WriteLiteral(@"                <label class=""col-sm-6 text-right"" for=""activeUserUsername"">Username</label>
                <input class=""col-sm-6"" type=""text"" v-model=""activeUser.username"" id=""activeUserUsername"" v-on:input=""CheckDifference()"" />
            </div>
            <div class=""row"">
                <label class=""col-sm-6 text-right"" for=""activeUserMembershipId"">Membership id</label>
                <input class=""col-sm-6"" type=""text"" id=""cactiveUserMembershipId"" readonly v-model=""activeUser.membershipId""/>
            </div>
            <div class=""row"">
                <img v-bind:src=""GetPlatformUrl(activeUser.membershipType)""/>
            </div>
            <div class=""row"">
                <label class=""col-sm-6 text-right"" for=""activeUserDiscordId"">Discord id</label>
                <input class=""col-sm-6"" type=""text"" id=""activeUserDiscordId"" v-model=""activeUser.discordId"" v-on:input=""CheckDifference()"" />
            </div>
            <div class=""row"">
                <label class=""col-sm");
            WriteLiteral(@"-6 text-right "" for=""activeUserDateRegistered"">Date registered</label>
                <input class=""col-sm-6"" type=""text"" id=""activeUserDateRegistered"" readonly v-model=""activeUser.dateRegistered""/>
            </div>
            <div class=""row"">
                <label class=""col-sm-6 text-right"" for=""activeUserLastPlayed"">Last played</label>
                <input class=""col-sm-6"" type=""text"" id=""activeUserLastPlayed"" v-model=""activeUser.dateLastPlayed"" v-on:input=""CheckDifference()""/>
            </div>
            <div class=""row"">
                <h4 class=""col-sm-8 text-center"">Character id</h4>
                <h4 class=""col-sm-2 text-center"">Handled</h4>
                <h4 class=""col-sm-2 text-center"">Deleted</h4>
            </div>
            <div class=""row"" v-for=""character in activeUser.characters"">
               <input class=""col-sm-8"" type=""text"" readonly v-model=""character.characterId""/>
               <input class=""col-sm-2"" type=""checkbox"" :checked=""character.handled == 1"" v");
            WriteLiteral(@"-on:input=""CheckDifference()""/>
               <input class=""col-sm-2"" type=""checkbox"" :checked=""character.deleted == 1"" v-on:input=""CheckDifference()""/>
            </div>
            <input type=""submit"" v-on:click=""UpdateUser()""/> 
            <input type=""submit"" value=""check difference"" v-on:click=""CheckDifference()""/>
         </div>
      </div>
   </div>
</div>
<script>
    var app = new Vue({
        el: '#app',
        data: {
            usernameSearch: """",
            users: [],
            filteredUsers: [],
            activeUser: null,
            activeUserBase: null,
            changes: false,
            error: ""You have unsaved changes.""
        },
        mounted() {
            fetch('api/Users/GetUsers', {
                method: ""GET"",
                headers: {
                    'Content-Type': 'application/json',
                    Accept: 'application/json'
                }
            })
            .then(response => response.json())
            .t");
            WriteLiteral(@"hen((data) => {
                this.users = data;
                this.filteredUsers = data;
            });
        },
        methods: {
            TbChange(){
                this.filteredUsers = this.users.filter(user => user.username.toLowerCase().includes(this.usernameSearch.toLowerCase()) 
                                                            || user.discordId.includes(this.usernameSearch)
                                                            || user.membershipId.includes(this.usernameSearch));
                console.log(this.filteredUsers);
             },
             SetActiveUser(guid){
                this.activeUser = this.users.find(user => user.guid == guid);
                this.activeUserBase = this.activeUser;
                this.changes = false;
                console.log(this.activeUser);
             },
             GetPlatformUrl(platform){
                 if (platform == 1) return ""img/xbox.svg"";
                 if (platform == 2) return ""img/ps.sv");
            WriteLiteral(@"g"";
                 if (platform == 3) return ""img/pc.svg""
                 return """";
             },
             UpdateUser(){
                 fetch('api/Users/UpdateUser', {
                    method: ""POST"",
                    headers: {
                        'Content-Type': 'application/json',
                        Accept: 'application/json'
                    },
                    body: JSON.stringify(this.activeUser)
                 })
                 .then(response => response.json())
                 .then((data) => {
                    console.log(data);
                 })
             },
             CheckDifference(){
                 console.log(""checking changes"");
                 var changes = false;
                 if (this.activeUser.username !== this.activeUserBase.username) 
                 { 
                     changes = true; 
                     console.log(""username is different""); 
                     console.log(this.activeUser.username);");
            WriteLiteral(@" 
                     console.log(this.activeUserBase.username); 
                 }
                 if (this.activeUser.discordId !== this.activeUserBase.username) { changes = true; console.log(""username is different""); };
                 if (this.activeUser.dateLastPlayed !== this.activeUserBase.dateLastPlayed) { changes = true; console.log(""username is different""); }
                 console.log(changes);
                 this.changes = changes;
             }
        }
    });
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<BotDashboard.Pages.Users.IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<BotDashboard.Pages.Users.IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<BotDashboard.Pages.Users.IndexModel>)PageContext?.ViewData;
        public BotDashboard.Pages.Users.IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
