@page
@model BotDashboard.Pages.Users.IndexModel
@{
}
<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
<div id="app">
    <div class="row align-items-center" v-if="hasChanged" style="position: fixed; top: 1.5%; left: 50%;">
        {{ error }}
    </div>
    <div class="row text-center" v-bind:style="errorMessageActive ? 'height: 100px; border-top: 2px solid red;' : 'height: 0px; border: none;'" style="position: fixed; bottom: 0; left: 0; width: 100%; background-color: #1f1f1f; margin: 0px; transition: height 0.6s; z-index: 10;">
        {{ message }}
    </div>
    <div class="container">
        <div class="row">
            <div class="col-sm-3">
                <input v-on:input="TbChange()" v-model="usernameSearch"/>
                <div style="overflow-y: scroll;">
                    <div v-for="user in filteredUsers" v-if="users != null" v-on:click="SetActiveUser(user.guid)">
                        <h6>{{ user.username }}</h6>
                        <div class="row">
                            <p class="col-sm-9"> {{ user.membershipId }}</p>
                            <img class="col-sm-3" v-bind:src="GetPlatformUrl(user.membershipType)"/>
                        </div>
                    </div>
                </div>
            </div>
            <div v-if="activeUserBase != null" class="col-sm-9">
                <div class="row">
                    {{ activeUserBase.username }}
                    <img v-bind:src="GetPlatformUrl(activeUser.membershipType)"/>
                </div>
                <div class="row">
                    <label class="col-sm-6 text-right" for="activeUserBaseUsername">Username</label>
                    <input class="col-sm-6" type="text" v-model="activeUserBase.username" id="activeUserBaseUsername"/>
                </div>
                <div class="row">
                    <label class="col-sm-6 text-right" for="activeUserBaseMembershipId">Membership id</label>
                    <input class="col-sm-6" type="text" v-model="activeUserBase.membershipId" id="activeUserBaseMembershipId" readonly/>
                </div>
                <div class="row">
                    <label class="col-sm-6 text-right" for="activeUserBaseDiscordId">Discord id</label>
                    <input class="col-sm-6" type="text" v-model="activeUserBase.discordId" id="activeUserBaseDiscordId" />
                </div>
                <div class="row">
                    <label class="col-sm-6 text-right " for="activeUserBaseDateRegistered">Date registered</label>
                    <input class="col-sm-6" type="text" v-model="activeUserBase.dateRegistered"  id="activeUserBaseDateRegistered" readonly/>
                </div>
                <div class="row">
                    <label class="col-sm-6 text-right" for="activeUserBaseLastPlayed">Last played</label>
                    <input class="col-sm-6" type="text" v-model="activeUserBase.dateLastPlayed" id="activeUserBaseLastPlayed" />
                </div>
                <div class="row">
                    <h4 class="col-sm-8 text-left">Character id</h4>
                    <h4 class="col-sm-2 text-center">Handled</h4>
                    <h4 class="col-sm-2 text-center">Deleted</h4>
                </div>
                <div class="row justify-content-center align-items-center" v-for="character in activeUserBase.characters">
                    <input class="col-sm-8" type="text" v-model="character.characterId" readonly/>
                    <input class="col-sm-2" type="checkbox" v-model="character.handled"/>
                    <input class="col-sm-2" type="checkbox" v-model="character.deleted"/>
                </div>
                <input type="submit" value="Save changes" v-on:click="UpdateUser()"/> 
                <input type="submit" value="Delete" v-on:click="DeleteUser"/>
            </div>
        </div>
    </div>
</div>
<script>
    var app = new Vue({
        el: '#app',
        data: {
            usernameSearch: "",
            users: [],
            filteredUsers: [],
            activeUser: null,
            activeUserBase: null,
            error: "You have unsaved changes.",
            message: ""
        },
        mounted() {
            this.GetUserList();
        },
        computed: {
            hasChanged() {
                return JSON.stringify(this.activeUser) !== JSON.stringify(this.activeUserBase);
            },
            errorMessageActive() {
                return this.message != "";
            }
        },
        methods: {
            TbChange(){
                this.filteredUsers = this.GetFilteredUsers();
                console.log(this.filteredUsers);
            },
            GetFilteredUsers(){
                if (this.usernameSearch == ""){
                    return this.users;
                }else{
                    return this.users.filter(user => user.username.toLowerCase().includes(this.usernameSearch.toLowerCase()) 
                                                            || user.discordId.includes(this.usernameSearch)
                                                            || user.membershipId.includes(this.usernameSearch));
                }
            },
            SetActiveUser(guid){
                this.activeUser = this.users.find(user => user.guid == guid);
                this.activeUserBase = JSON.parse(JSON.stringify(this.activeUser));
            },
            GetPlatformUrl(platform){
                if (platform == 1) return "img/xbox.svg";
                if (platform == 2) return "img/ps.svg";
                if (platform == 3) return "img/pc.svg"
                return "";
            },
            UpdateUser(){
                this.message = "Saving...";
                fetch('api/Users/UpdateUser', {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json',
                        Accept: 'application/json'
                    },
                    body: JSON.stringify(this.activeUserBase)
                })
                .then(response => response.json())
                .then((data) => {
                    this.LogMessage(data.message);
                    if (data.code == 1) 
                    {
                        this.GetUserList(this.activeUserBase.guid);
                    }
                });
            },
            LogMessage(message){
                this.message = message;
                setTimeout(() => {
                    this.message = "";
                }, 2000) 
            },
            GetUserList(guid){
                fetch('api/Users/GetUsers', {
                method: "GET",
                headers: {
                    'Content-Type': 'application/json',
                    Accept: 'application/json'
                    }
                })
                .then(response => response.json())
                .then((data) => {
                    this.users = data;  
                    this.filteredUsers = this.GetFilteredUsers();
                    if (guid != null){
                        this.SetActiveUser(guid);
                    }
                });
            },
            DeleteUser(){
                fetch("api/Users/DeleteUser", {
                    method: "DELETE",
                    headers: {
                        'Content-Type': 'application/json',
                        Accept: 'application/json'
                    },
                    body: JSON.stringify(this.activeUserBase)
                })
                .then(response => response.json())
                .then((data) => {
                    if (data.code == 1){
                        this.LogMessage("User deleted");
                        this.GetUserList();
                        this.activeUserBase = null;
                        this.activeUser = null;
                    }
                })
            }
        }
    });
</script>